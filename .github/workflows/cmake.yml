name: C++ CI

on:
  push:
    branches: [main] # replace with main (if applicable)
    tags: ['*']
  pull_request:
    branches: [main] # replace with main (if applicable)

jobs:
  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}

    defaults:
      run:
        # Use a bash shell, so we can use the same syntax for environment variable
        # access regardless of the host operating system
        # https://github.com/saxbophone/CPP20-Cross-Platform-Template
        shell: bash

    env:
      CC: ${{ matrix.c }}
      CXX: ${{ matrix.cxx }}
      BOOST_LINK: ${{ matrix.boost_link }}
      BOOST_TOOLSET: ${{ matrix.boost_toolset }}
      BOOST_USE_STATIC: ${{ matrix.boost_use_static }}
      BOOST_LIBS: --with-atomic --with-chrono --with-date_time --with-filesystem --with-log --with-program_options --with-random --with-regex --with-system --with-thread
      CMAKE_GENERATOR: ${{ matrix.cmake_generator }}
      BUILD_TYPE: Debug
      BUILD_SHARED_LIBS: ${{ matrix.build_shared_libs }}
      BOOST_DOT_VER: "1.78.0"
      BOOST_VER: "1_78_0"

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-20.04
            c: clang-12
            cxx: clang++-12
            name: Ubuntu 20.04 Clang 12
            cmake_flags: -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
            boost_link: static
            boost_toolset: clang
            boost_use_static: ON
            build_shared_libs: OFF

          # - os: ubuntu-20.04
          #   c: clang-10
          #   cxx: clang++-10
          #   name: Ubuntu 20.04 Clang 10
          #   # cmake_flags:
          #   boost_link: static
          #   boost_toolset: clang
          #   boost_use_static: ON
          #   build_shared_libs: OFF

          - os: ubuntu-20.04
            c: gcc-10
            cxx: g++-10
            name: Ubuntu 20.04 GCC 10
            # cmake_flags:
            boost_link: static
            boost_toolset: gcc
            boost_use_static: ON
            build_shared_libs: OFF

          - os: macos-11
            c: clang
            cxx: clang++
            name: macOS 11 Apple Clang 13
            cmake_flags: -DOPENSSL_ROOT_DIR=/usr/local/opt/openssl@1.1
            boost_link: static
            boost_toolset: clang
            boost_use_static: ON
            build_shared_libs: OFF

          # - os: macos-11
          #   c: gcc-11
          #   cxx: g++-11
          #   name: macOS 11 GCC 11
          #   # cmake_flags:
          #   boost_link: static
          #   boost_toolset: gcc
          #   boost_use_static: ON
          #   build_shared_libs: OFF

          - os: windows-2022
            c: cl
            cxx: cl
            name: Windows 2022 MSVC 19.30
            # cmake_flags: #-DOPENSSL_ROOT_DIR=libs/openssl
            boost_link: shared
            boost_toolset: msvc
            boost_use_static: OFF
            build_shared_libs: ON

          # - os: windows-2022
          #   c: gcc
          #   cxx: g++
          #   name: Windows 2022 GCC 10
          #   # cmake_flags:
          #   cmake_generator: Ninja
          #   # other generator: "\"MinGW Makefiles\""
          #   boost_link: shared
          #   boost_toolset: gcc
          #   boost_use_static: OFF
          #   build_shared_libs: ON

    steps:
      - uses: actions/checkout@v2

      - name: Prepare env
        run: |
          echo $GITHUB_WORKSPACE
          mkdir $GITHUB_WORKSPACE/artifacts

      - name: Install Linux Dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install clang-tidy valgrind zlib1g-dev

      - name: Cache tools
        uses: actions/cache@v2
        if: runner.os == 'Linux' && matrix.cxx == 'clang++-12'
        id: cache-tools
        with:
          path: tools
          key: tools

      - name: Build tools
        if: runner.os == 'Linux' && matrix.cxx == 'clang++-12' && steps.cache-tools.outputs.cache-hit != 'true'
        run: |
          mkdir tools/
          wget https://github.com/danmar/cppcheck/archive/2.6.zip
          unzip 2.6.zip
          rm 2.6.zip
          mv cppcheck-2.6 tools/cppcheck-2.6
          cd tools/cppcheck-2.6
          mkdir build
          cmake -S . -B build
          cmake --build build -j6

      - name: Install tools
        # this step is fast, no need for caching
        if: runner.os == 'Linux' && matrix.cxx == 'clang++-12'
        # build/install other tools in these steps
        run: |
          cd tools/cppcheck-2.6
          sudo cmake --install build

      - name: Cache Ninja deps
        uses: actions/cache@v2
        if: matrix.cmake_generator == 'Ninja'
        id: cache-deps-ninja
        with:
          path: |
            build/.ninja_deps
            build/.ninja_log
          key: ${{ matrix.os }}-${{ matrix.cxx }}-ninja-cache

      - name: Cache MinGW
        uses: actions/cache@v2
        id: cache-mingw
        if: runner.os == 'Windows' && matrix.cxx == 'g++'
        with:
          path: gcc
          key: ${{ runner.os }}-gcc-10

      - name: Download toolchain (MinGW)
        uses: suisei-cn/actions-download-file@v1
        id: downloadgcc
        if: runner.os == 'Windows' && matrix.cxx == 'g++' && steps.cache-mingw.outputs.cache-hit != 'true'
        # replace with another version from https://winlibs.com if this one does not work
        with:
          url: "https://github.com/brechtsanders/winlibs_mingw/releases/download/11.2.0-9.0.0-ucrt-r4/winlibs-x86_64-posix-seh-gcc-11.2.0-mingw-w64ucrt-9.0.0-r4.7z"
          target: compiler

      - name: Install toolchain (MinGW)
        if: runner.os == 'Windows' && matrix.cxx == 'g++' && steps.cache-mingw.outputs.cache-hit != 'true'
        run: |
          7z x compiler/winlibs-x86_64-posix-seh-gcc-11.2.0-mingw-w64ucrt-9.0.0-r4.7z -ogcc


      - name: Cache deps
        uses: actions/cache@v2
        id: cache-deps
        # make this depend on the dependency version
        with:
          path: |
            libs
          key: cache-${{ matrix.cmake_generator }}-${{ matrix.os }}-${{ matrix.cxx }}-1

      - name: Build/install deps
        if: steps.cache-deps.outputs.cache-hit != 'true' && runner.os != 'Windows'
        run: |
          PATH="$(pwd)/gcc/mingw64/bin:$PATH"
          cd libs
          chmod +x ./build_deps.sh
          ./build_deps.sh


      # use a separate cache so we do not need to rebuild all deps
      - name: Cache zlib and openssl
        uses: actions/cache@v2
        id: cache-openssl
        if: runner.os == 'Windows'
        with:
          path: |
            libs/openssl
            libs/zlib
          key: cache-openssl-${{ matrix.cmake_generator }}-${{ matrix.os }}-${{ matrix.cxx }}

      - uses: actions/checkout@v2
        if: steps.cache-openssl.outputs.cache-hit != 'true' && runner.os == 'Windows'
        with:
          repository: zlib-ng/zlib-ng
          ref: 2.0.6
          path: libs/zlib

      - name: Build and install Zlib (Windows)
        if: steps.cache-openssl.outputs.cache-hit != 'true' && runner.os == 'Windows'
        working-directory: libs/zlib
        run: |
          # -DCMAKE_INSTALL_PREFIX=install_dir 
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DZLIB_COMPAT=ON -DZLIB_ENABLE_TESTS=OFF -A x64
          cmake --build build --config Release
          cmake --install build --config Release
          #--prefix install_dir

      - uses: actions/checkout@v2
        if: steps.cache-openssl.outputs.cache-hit != 'true' && runner.os == 'Windows'
        with:
          repository: openssl/openssl
          ref: OpenSSL_1_1_1o
          path: libs/openssl

      - uses: ilammy/msvc-dev-cmd@v1
        if: runner.os == 'Windows'

      - uses: shogo82148/actions-setup-perl@v1
        if: runner.os == 'Windows'

      - name: OpenSSL prepare the build directory (Windows MSVC)
        if: steps.cache-openssl.outputs.cache-hit != 'true' && runner.os == 'Windows'
        run: mkdir -p libs/openssl/_build

      - name: OpenSSL config (Windows MSVC)
        if: steps.cache-openssl.outputs.cache-hit != 'true' && runner.os == 'Windows'
        working-directory: libs/openssl/_build
        shell: cmd
        run: |
          perl ..\Configure --banner=Configured no-makedepend no-deprecated no-asm no-tests -DOPENSSL_SMALL_FOOTPRINT VC-WIN64A
          perl configdata.pm --dump
      - name: OpenSSL build (Windows MSVC)
        if: steps.cache-openssl.outputs.cache-hit != 'true' && runner.os == 'Windows'
        working-directory: libs/openssl/_build
        run: nmake # verbose, so no /S here
        shell: cmd

      - name: OpenSSL install (Windows MSVC)
        if: runner.os == 'Windows'
        working-directory: libs/openssl/_build
        run: nmake install
        shell: cmd


      - name: Build/install deps (Windows)
        if: steps.cache-deps.outputs.cache-hit != 'true' && runner.os == 'Windows'
        working-directory: libs
        run: |
          # TODO https://github.com/openssl/openssl/blob/master/.github/workflows/windows.yml
          BOOST_LIBS="--with-date_time --with-log --with-program_options --with-regex --with-system"
          #PATH="$(pwd)/gcc/mingw64/bin:$PATH"
          chmod +x ./build_deps.sh
          ./build_deps.sh

      - name: Configure CMake (MinGW)
        if: runner.os == 'Windows' && matrix.cxx == 'g++'
        run: |
          PATH="$(pwd)/gcc/mingw64/bin:$PATH"
          cmake -S $GITHUB_WORKSPACE -B build \
            -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
            -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/artifacts \
            ${{ matrix.cmake_flags }}

      - name: Configure CMake
        if: ${{ !(runner.os == 'Windows' && matrix.cxx == 'g++') }}
        run: |
          cmake -S $GITHUB_WORKSPACE -B build \
            -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
            -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/artifacts \
            -DBOOST_ROOT=libs/boost_$BOOST_VER/install_dir \
            -DBoost_USE_STATIC_LIBS=$BOOST_USE_STATIC \
            -DBoost_USE_STATIC_RUNTIME=$BOOST_USE_STATIC \
            -DCPPRESTSDK_LIB_DIR=libs/cpprestsdk/build.release/install_dir/lib \
            -DGITHUB_ACTIONS=ON \
            -DZLIB_LIBRARY=/usr/lib/libz.dll.a \
            ${{ matrix.cmake_flags }}

      - name: Windows patch
        if: runner.os == 'Windows'
        run: |
          cp build/libs/libpqxx/include/pqxx/*.h libs/libpqxx/include/pqxx/

      - name: Build
        # Execute the build using N jobs (-jN). You can specify a specific target with "--target <NAME>"
        run: cmake --build build --config $BUILD_TYPE -j6

      - name: Install
        # Use CMake to "install" build artifacts (only interested in CMake registered targets) to our custom artifacts directory
        run: cmake --install build --config $BUILD_TYPE --prefix artifacts

      - name: Copy pqxx dll
        if: runner.os == 'Windows' && matrix.cxx == 'cl'
        run: |
          #cp libs/libpqxx/src/Debug/pqxx.dll artifacts/bin/pqxx.dll
          #cp libs/libpqxx artifacts/bin/libpqxx
          cp $(where ucrtbased.dll) artifacts/bin/
          cp $(where VCRUNTIME140_1D.dll) artifacts/bin/
          cp $(where MSVCP140D.dll) artifacts/bin/
          cp $(where VCRUNTIME140D.dll) artifacts/bin/

      - name: Copy stdlib (MinGW)
        if: runner.os == 'Windows' && matrix.cxx == 'g++'
        # static linking might not work with MinGW, might be easier this way
        run: |
          cp gcc/mingw64/bin/libstdc++-6.dll $GITHUB_WORKSPACE/artifacts/bin

      - name: Cppcheck
        if: runner.os == 'Linux' && matrix.cxx == 'clang++-12'
        run: cppcheck --enable=all --project=build/compile_commands.json -ibuild --suppress='*:libs/*' --suppress='*:build/*' --suppress=missingIncludeSystem --suppress=unmatchedSuppression --suppress=unusedFunction --error-exitcode=1

      - name: Clang-tidy
        if: runner.os == 'Linux' && matrix.cxx == 'clang++-12'
        # config from https://gist.github.com/jfm535/7581ccadbd539303d8bed2f46f973108
        run: |
          cat build/compile_commands.json |
            jq -r '.[] | .file' |           # select source file paths from CMake project; -r to strip quotes
            grep -v "/build/_deps/" |       # ignore external dependencies
            grep -v "/libs/" |              # ignore external dependencies
            xargs clang-tidy -p build

  #    - name: Sanitizers
  #     # run one sanitizer for each OS to avoid extra binaries;
  #     # memory on Linux clang, address on macOS clang
  #     # if: runner.os != 'Windows'
  #     if: startsWith(matrix.cxx, 'clang++')
  #     # NOTE: update executable name if it is changed in CMakeLists.txt
  #     # detect_leaks is not supported on macOS
  #     # env:
  #     # ASAN_OPTIONS: detect_leaks=1
  #     run: |
  #       cat date.txt | ./artifacts/bin/proj

  #   - name: Valgrind
  #     if: runner.os == 'Linux' && matrix.cxx == 'g++-10'
  #     # NOTE: update executable name if it is changed in CMakeLists.txt
  #     run: |
  #       # remove --show-leak-kinds=all --track-origins=yes if there are many leaks in external libs
  #       cat date.txt | valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes --error-exitcode=1 ./artifacts/bin/proj

      - name: Move artifacts
        run: |
          mv artifacts/bin bin

      - name: Set Tag Name
        if: startsWith(github.ref, 'refs/tags/')
        # trim prefix from ref to get tag name
        run: echo "TAG_NAME=${GITHUB_REF#'refs/tags/'}" >> $GITHUB_ENV

      - name: Archive Release
        uses: thedoctor0/zip-release@master
        #if: startsWith(github.ref, 'refs/tags/')
        with:
          type: 'zip'
          path: bin
          filename: ${{ env.BUILD_TYPE }}_${{ env.TAG_NAME }}_${{ matrix.os }}_${{ matrix.cxx }}.zip

      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            ${{ env.BUILD_TYPE }}_${{ env.TAG_NAME }}_${{ matrix.os }}_${{ matrix.cxx }}.zip

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.BUILD_TYPE }}_${{ env.TAG_NAME }}_${{ matrix.os }}_${{ matrix.cxx }}.zip
          path: ${{ env.BUILD_TYPE }}_${{ env.TAG_NAME }}_${{ matrix.os }}_${{ matrix.cxx }}.zip
          retention-days: 10